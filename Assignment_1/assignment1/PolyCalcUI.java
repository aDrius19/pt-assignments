package assignment1.polynomialcalculator;
import assignment1.polynomialcalculator.Model.Polynom;
import assignment1.polynomialcalculator.Model.Monom;
import assignment1.polynomialcalculator.Control;
import javax.swing.JOptionPane;
import java.util.regex.*;
/**
 *
 * @author Darius
 */
public class PolyCalcUI extends javax.swing.JFrame {
    private String result = ""; //The String in which we will place the final result
    String REGEX = "([+-]?[^-+]+)"; //used for validations
    private static Polynom polynomP = new Polynom();
    private static Polynom polynomQ = new Polynom();
    Control oper = new Control();
        
    public PolyCalcUI() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        poly1 = new javax.swing.JTextField();
        poly2 = new javax.swing.JTextField();
        integral1 = new javax.swing.JButton();
        derivation1 = new javax.swing.JButton();
        derivation2 = new javax.swing.JButton();
        integral2 = new javax.swing.JButton();
        add = new javax.swing.JButton();
        sub = new javax.swing.JButton();
        mul = new javax.swing.JButton();
        div = new javax.swing.JButton();
        resultPoly = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        poly1.setText("First Polynom"); // NOI18N
        poly1.setToolTipText("");
        poly1.setName(""); // NOI18N
        poly1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                poly1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                poly1FocusLost(evt);
            }
        });
        poly1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poly1ActionPerformed(evt);
            }
        });

        poly2.setText("Second Polynom");
        poly2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                poly2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                poly2FocusLost(evt);
            }
        });
        poly2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poly2ActionPerformed(evt);
            }
        });

        integral1.setText("Integrate");
        integral1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                integral1KeyPressed(evt);
            }
        });

        derivation1.setText("Derivate");
        derivation1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                derivation1KeyPressed(evt);
            }
        });

        derivation2.setText("Derivate");
        derivation2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                derivation2KeyPressed(evt);
            }
        });

        integral2.setText("Integrate");
        integral2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                integral2KeyPressed(evt);
            }
        });

        add.setText("+");
        add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addKeyPressed(evt);
            }
        });

        sub.setText("-");
        sub.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                subKeyPressed(evt);
            }
        });

        mul.setText("*");
        mul.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mulKeyPressed(evt);
            }
        });

        div.setText("/");
        div.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                divKeyPressed(evt);
            }
        });

        resultPoly.setEditable(false);
        resultPoly.setText("The result with the rest");
        resultPoly.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                resultPolyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                resultPolyFocusLost(evt);
            }
        });
        resultPoly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultPolyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resultPoly, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sub)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mul)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(div))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(poly1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                    .addComponent(poly2))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(integral1)
                                        .addGap(27, 27, 27)
                                        .addComponent(derivation1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(integral2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                        .addComponent(derivation2)
                                        .addGap(9, 9, 9)))))
                        .addGap(34, 34, 34))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(poly1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(integral1)
                    .addComponent(derivation1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(poly2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(integral2)
                    .addComponent(derivation2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(sub)
                    .addComponent(mul)
                    .addComponent(div))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultPoly, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        poly1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>                        

    private void poly1FocusGained(java.awt.event.FocusEvent evt) {                                  
         if(poly1.getText().trim().equals("First Polynom")){
            poly1.setText("");
        }
    }                                 

    private void poly1FocusLost(java.awt.event.FocusEvent evt) {                                
              if(poly1.getText().trim().equals("")){
            poly1.setText("First Polynom");
        }
    }                               

    private void poly2FocusGained(java.awt.event.FocusEvent evt) {                                  
        if(poly2.getText().trim().equals("Second Polynom")){
            poly2.setText("");}
    }                                 

    private void poly2FocusLost(java.awt.event.FocusEvent evt) {                                
         if(poly2.getText().trim().equals("")){
            poly2.setText("Second Polynom");}
    }                               

    private void poly1ActionPerformed(java.awt.event.ActionEvent evt) {                                      
        String textP;
        Monom m;
        int ok = 0;
        textP = poly1.getText();//get the text from the first textbox for the first polynom
        Pattern pattern = Pattern.compile(REGEX); //pattern for regex
        Matcher matcher = pattern.matcher(textP); //the matcher for the input sequence
        
        while(matcher.find()) //returns true if the input sequence is the one given in the pattern
        {   
            ok = 1;
            m = new Monom(0, 0);
            if(matcher.group(3).isEmpty() == true){ //group 3 is fot the power of a monom, for us is just with plus
              if(matcher.group(1).contains("x") || matcher.group(1).contains("X")){ //group 1 is for the "x/X" variable
                  m.setCoef(Integer.parseInt(matcher.group(2))); //group 2 is for the coeff, the sign can be +/-
                  m.setPower(1);
                  polynomP.addMonom(m);}
                else{ 
                    m.setCoef(Integer.parseInt(matcher.group(2)));
                    m.setPower(0);
                    polynomP.addMonom(m);}  
            }
            else{
                m.setCoef(Integer.parseInt(matcher.group(2)));
                m.setPower(Integer.parseInt(matcher.group(3)));
                polynomP.addMonom(m);}
        }
        if (ok == 0) JOptionPane.showMessageDialog(rootPane, "Bad Input!", "Error!", JOptionPane.ERROR_MESSAGE); //if the matcher does not have the pattern from the regex
    }                                     

    private void integral1KeyPressed(java.awt.event.KeyEvent evt) {                                     
        result = oper.inte(polynomP).toStringDouble();
    }                                    

    private void resultPolyFocusGained(java.awt.event.FocusEvent evt) {                                       
        if(resultPoly.getText().trim().equals("The result is here with rest")){
            resultPoly.setText(resultPoly.getText());}
    }                                      

    private void resultPolyFocusLost(java.awt.event.FocusEvent evt) {                                     
        if(resultPoly.getText().trim().equals("")){
            resultPoly.setText("The result is here with rest");}
    }                                    

    private void derivation1KeyPressed(java.awt.event.KeyEvent evt) {                                       
        result = oper.deriv(polynomP).toString();
    }                                      

    private void integral2KeyPressed(java.awt.event.KeyEvent evt) {                                     
        result = oper.inte(polynomQ).toStringDouble();
    }                                    

    private void derivation2KeyPressed(java.awt.event.KeyEvent evt) {                                       
        result = oper.deriv(polynomQ).toString();
    }                                      

    private void resultPolyActionPerformed(java.awt.event.ActionEvent evt) {                                           
        resultPoly.setText(result);
    }                                          

    private void addKeyPressed(java.awt.event.KeyEvent evt) {                               
        result = oper.add(polynomP, polynomQ).toString();
    }                              

    private void subKeyPressed(java.awt.event.KeyEvent evt) {                               
        result = oper.sub(polynomP, polynomQ).toString();
    }                              

    private void mulKeyPressed(java.awt.event.KeyEvent evt) {                               
        result = oper.mul(polynomP, polynomQ).toString();
    }                              

    private void divKeyPressed(java.awt.event.KeyEvent evt) {                               
        if(polynomP.getMonom(0).getPower() < polynomQ.getMonom(0).getPower())
            {JOptionPane.showMessageDialog(rootPane, "Polynom Q's power is greater than Polynom P's! ", "Warning", JOptionPane.INFORMATION_MESSAGE);
            result = "0  " + "r = " + polynomP.toString();}
            else result = oper.div(polynomP, polynomQ);
    }                              

    private void poly2ActionPerformed(java.awt.event.ActionEvent evt) {                                      
        String textQ; //the comments are almost the same for the second polynom
        Monom m;
        int ok = 0;
        textQ = poly2.getText();//get the text from the second text box for the second polynom
        Pattern pattern = Pattern.compile(REGEX);
        Matcher matcher = pattern.matcher(textQ);
        
        while(matcher.find())
        {   
            ok = 1;
            m = new Monom(0, 0);
            if(matcher.group(3).isEmpty() == true){ 
              if(matcher.group(1).contains("x") || matcher.group(1).contains("X")){ 
                  m.setCoef(Integer.parseInt(matcher.group(2)));
                  m.setPower(1);
                  polynomP.addMonom(m);}
                else{ 
                    m.setCoef(Integer.parseInt(matcher.group(2)));
                    m.setPower(0);
                    polynomP.addMonom(m);}  
            }
            else{
                m.setCoef(Integer.parseInt(matcher.group(2)));
                m.setPower(Integer.parseInt(matcher.group(3)));
                polynomP.addMonom(m);}
        }
        if (ok == 0) JOptionPane.showMessageDialog(rootPane, "Bad Input!", "Error!", JOptionPane.ERROR_MESSAGE);
    }                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PolyCalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PolyCalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PolyCalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PolyCalcUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PolyCalcUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton add;
    private javax.swing.JButton derivation1;
    private javax.swing.JButton derivation2;
    private javax.swing.JButton div;
    private javax.swing.JButton integral1;
    private javax.swing.JButton integral2;
    private javax.swing.JButton mul;
    private javax.swing.JTextField poly1;
    private javax.swing.JTextField poly2;
    private javax.swing.JTextField resultPoly;
    private javax.swing.JButton sub;
    // End of variables declaration                   
}